[tasks.format-rust]
args = ["fmt"]
command = "cargo"
dependencies = ["install-rustfmt"]
description = "Format rust sources files."

[tasks.lint-rust-format]
args = ["fmt", "--all", "--", "--check"]
command = "cargo"
dependencies = ["install-rustfmt"]
description = "Check format of sources files."

[tasks.lint-rust]
args = [
  "clippy",
  "--workspace",
  "--locked",
  "--all-targets",
  "--",
  "-D",
  "clippy::all",
  "-D",
  "warnings",
]
command = "cargo"
dependencies = ["install-clippy"]
description = "Check lint of all sources files."

[tasks.lint-toml]
args = ["lint"]
command = "taplo"
dependencies = ["install-taplo-cli"]
description = "Check lint of all toml files."

[tasks.format-toml]
args = ["fmt"]
command = "taplo"
dependencies = ["install-taplo-cli"]
description = "Format toml file"

[tasks.lint]
dependencies = ["lint-rust-format", "lint-rust", "lint-toml"]

[tasks.format]
dependencies = ["format-rust", "format-toml"]

[tasks.clean]
args = ["clean"]
command = "cargo"

[tasks.build]
args = ["build", "--release", "--locked"]
command = "cargo"

[tasks.test]
args = ["test", "--lib", "--tests", "--workspace", "--locked"]
command = "cargo"
description = "Run all unit tests."

[tasks.test-coverage]
dependencies = ["install-llvm-tools-preview", "install-llvm-cov"]
command = "cargo"
args = ["llvm-cov", "--workspace", "--lcov", "--output-path", "lcov.info"]

[tasks.install_wasm]
script = '''
rustup target add wasm32-unknown-unknown
'''

[tasks.wasm]
args = ["build", "--release", "--lib", "--target", "wasm32-unknown-unknown"]
command = "cargo"
dependencies = ["install_wasm"]
env = { RUSTFLAGS = "-C link-arg=-s" }

[tasks.schema]
workspace = true

[tasks.check_contracts]
dependencies = ["install-cosmwasm-check", "wasm"]
script = '''
cosmwasm-check ./target/wasm32-unknown-unknown/release/*.wasm
'''

[tasks.generate_docs]
dependencies = ["schema"]
script = '''
DOCS_FOLDER=docs
SCHEMA_FOLDER=schema
echo "üîé Checking jsonschema2md installed..."
if ! which jsonschema2md >/dev/null;
then
    echo "\n‚ùå jsonschema2md could not be found"
    echo "  Consider installing jsonschema2md to generate documentation.\n"
    echo "Ôºû \`npm install -g @adobe/jsonschema2md\`\n\n"
    exit 1
fi

echo "üìö Generating documentation..."

mkdir -p $SCHEMA_FOLDER
find contracts/*/schema -type f -maxdepth 1 -name '*.json' \
    -exec sh -c 'cp "$@" "$0"' $SCHEMA_FOLDER/ {} +

for SCHEMA in $(ls $SCHEMA_FOLDER); do
    awk "{sub(\"#/definitions\",\"./${SCHEMA}/#/definitions\")} {print}"  ${SCHEMA_FOLDER}/${SCHEMA} > ${SCHEMA_FOLDER}/tmp

    mv ${SCHEMA_FOLDER}/tmp ${SCHEMA_FOLDER}/${SCHEMA}
done

rm -rf $DOCS_FOLDER

jsonschema2md -d schema -o $DOCS_FOLDER --schema-extension json --schema-out $DOCS_FOLDER/schema
sed -i ${SED_FLAG} -E 's/([a-zA-Z]+)<([a-zA-Z0-9]+)>/<code>\1\&lt;\2\&gt;\<\/code>/g' $DOCS_FOLDER/*.md

rm -rf $SCHEMA_FOLDER

echo "üìñ Documentation has been successfully generated and available at $(pwd)/$DOCS_FOLDER/README.md"
'''

[tasks.release_assets]
dependencies = ["wasm"]
script = '''
echo "üêæ Generating release binary checksums into ${DIR_WASM}"
{
  cd ${DIR_WASM}
  rm sha256sum.txt || true
  touch sha256sum.txt

  for asset in `ls *.wasm`; do
    shasum -a 256 ${asset} >> sha256sum.txt
  done
}
'''

[tasks.chain-clean]
condition = { fail_message = "üö´ The chain is running" }
condition_script = ["! docker ps -a | grep ${CHAIN} > /dev/null"]
description = "Clean the chain data (‚ö†Ô∏è definitively)"
script = '''
echo "Ô∏èüßπCleaning chain ${CHAIN} under ${CHAIN_HOME}"
rm -rf ${CHAIN_HOME}
'''

[tasks.chain-init-folder]
description = "Initialize deploy folder to make sure scripts have the right permission (needed for linux)"
script = '''
echo "Ô∏è‚ú® Create deploy folder structure"
mkdir -p ${DIR_DEPLOY}/${CHAIN}/config/keyring-test
mkdir -p ${DIR_DEPLOY}/${CHAIN}/config/gentx
mkdir -p ${DIR_DEPLOY}/${CHAIN}/keyring-test
mkdir -p ${DIR_DEPLOY}/${CHAIN}/data
'''

[tasks.chain-add-keys]
condition = { fail_message = "üö´ The chain is already initialized." }
condition_script = ["[ ! -f ${CHAIN_HOME}/config/genesis.json ]"]
dependencies = ["chain-init-folder"]
description = "Add a set of predefined keys (recovered from the seed phrases) to the chain."
script = '''
keys=(
  "validator:${MNEMONIC_VALIDATOR}"
  "alice:${MNEMONIC_ALICE}"
  "bob:${MNEMONIC_BOB}"
  "charlie:${MNEMONIC_CHARLIE}"
 )
for entry in "${keys[@]}" ; do
    name="${entry%%:*}"
    key="${entry##*:}"
    echo "üóùÔ∏è Adding key ${name} for chain ${CHAIN}"
    echo "${key}" \
    | docker run --rm -i \
        -v `pwd`:/app \
        -w /app \
        ${DOCKER_IMAGE_OKP4D} \
          keys add ${name} \
            --recover \
            --keyring-backend ${KEYRING_BACKEND} \
            --home ${CHAIN_HOME}
done
'''

[tasks.chain-initialize]
condition = { fail_message = "üö´ The chain is already initialized." }
condition_script = ["[ ! -f ${CHAIN_HOME}/config/genesis.json ]"]
dependencies = ["chain-add-keys"]
description = "Initialize the chain with a validator's key and a set of predefined keys. ‚ö†Ô∏è The home directory is cleaned before."
script = '''
echo "üõ†Ô∏è Initializing chain ${CHAIN} under ${CHAIN_HOME}"
docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    init ${CHAIN_MONIKER} \
      --chain-id=${CHAIN} \
      --home ${CHAIN_HOME}
sed -i ${SED_FLAG} 's/"stake"/"uknow"/g' ${CHAIN_HOME}/config/genesis.json
sed -i ${SED_FLAG} 's/"time_iota_ms": "1000"/"time_iota_ms": "10"/' ${CHAIN_HOME}/config/genesis.json

docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    add-genesis-account validator ${BALANCE_VALIDATOR} \
      --keyring-backend test \
      --home ${CHAIN_HOME}

balances=(
  "alice:${BALANCE_ALICE}"
  "bob:${BALANCE_BOB}"
  "charlie:${BALANCE_CHARLIE}"
 )
for entry in "${balances[@]}" ; do
    name="${entry%%:*}"
    balance="${entry##*:}"
    docker run --rm -i \
      -v `pwd`:/app \
      -w /app \
      ${DOCKER_IMAGE_OKP4D} \
         add-genesis-account ${name} "${balance}"  \
          --keyring-backend ${KEYRING_BACKEND} \
          --home ${CHAIN_HOME}
done

NODE_ID=$(
  docker run --rm \
    -v `pwd`:/app \
    -w /app \
    ${DOCKER_IMAGE_OKP4D} \
      tendermint show-node-id \
        --home ${CHAIN_HOME}
)
docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    gentx validator 1000000uknow \
      --node-id ${NODE_ID} \
      --chain-id=${CHAIN} \
      --keyring-backend test \
      --home ${CHAIN_HOME}

docker run --rm \
  -v `pwd`:/app \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
	  collect-gentxs \
	    --home ${CHAIN_HOME}
'''

[tasks.chain-start]
condition = { fail_message = "üö´ The chain is already running" }
condition_script = ["! docker ps -a | grep ${CHAIN} > /dev/null"]
description = "Run the full node okp4d application using the chain's home directory under a Docker container."
script = '''
echo "üöÄ Starting chain ${CHAIN} under ${CHAIN_HOME}"

if [ ! -f ${CHAIN_HOME}/config/genesis.json ]; then
  echo "‚ùå The chain seems to be uninitialised. Try: cargo make chain-initialize"
  exit 1
fi

docker run -d \
  --network host \
  -v `pwd`:/app \
  -w /app \
  --name ${CHAIN} \
  ${DOCKER_IMAGE_OKP4D} \
    start \
      --moniker ${CHAIN} \
      --home ${CHAIN_HOME}
'''

[tasks.chain-stop]
condition = { fail_message = "üö´ The chain is not running" }
condition_script = ["docker ps -a | grep ${CHAIN} > /dev/null"]
description = "Stop the chain's container."
script = '''
echo "üõë Stopping chain ${CHAIN} under ${CHAIN_HOME}"
docker stop ${CHAIN}
docker rm ${CHAIN}
'''

[tasks.chain-logs]
condition = { fail_message = "üö´ The chain is not running" }
condition_script = ["docker ps -a | grep ${CHAIN} > /dev/null"]
description = "Show the chain's container logs."
script = '''
echo "üìú Logs for chain ${CHAIN} under ${CHAIN_HOME}:"
docker logs -f ${CHAIN}
'''

[tasks.chain-deploy-contract]
dependencies = ["chain-start"]
description = "Deploy a specific contract to the chain. The contract must be compiled and the wasm file must be present in the artifacts directory (under target/wasm32-unknown-unknown/...)."
script = '''
if [ -z "$1" ]
then
  echo "‚ùå Please provide the contract name (without extension) as the first argument."
  exit 1
fi
contract=$1

echo "üì¶ Deploying contract ${contract}.wasm (under ${DIR_WASM}) to chain ${CHAIN}"
docker run --rm \
  --network host \
  -v `pwd`:/app:ro \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    tx wasm store ${DIR_WASM}/${contract}.wasm \
      --from validator \
      --keyring-backend test \
      --home ${CHAIN_HOME} \
      --gas-prices 0.025uknow \
      --gas auto \
      --gas-adjustment 1.5 \
      --chain-id ${CHAIN} \
      --broadcast-mode block \
      --yes
'''

[tasks.chain-deploy-contracts]
description = "Deploy all the available contracts to the chain (under target/wasm32-unknown-unknown/...)."
script = '''
find "${DIR_WASM}" -type f -name "*.wasm" -maxdepth 1 | while read file; do
  wasm=$(basename $file)
  contract=${wasm%.*}
  cargo make chain-deploy-contract $contract
done
'''

[tasks.chain-list-contracts]
description = "List all the contracts deployed to the chain."
script = '''
echo "üîç Listing contracts on chain ${CHAIN}"
docker run --rm \
  --network host \
  -v `pwd`:/app:ro \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    query wasm list-code \
      --limit 1000 \
      --home ${CHAIN_HOME} \
      --chain-id ${CHAIN}
'''

[tasks.chain-inspect-contract]
description = "Inspect a specific contract deployed to the chain."
script = '''
if [ -z "$1" ]
then
  echo "‚ùå Please provide the contract code ID as the first argument."
  exit 1
fi
code_id=$1
docker run --rm \
  --network host \
  -v `pwd`:/app:ro \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    query wasm code-info $code_id \
      --home ${CHAIN_HOME} \
      --chain-id ${CHAIN}
'''

[tasks.chain-instantiate-contract]
dependencies = ["chain-start"]
description = "Instantiate a specific contract to the chain. The contract must be already deployed."
script = '''
if [ -z "$1" ]
then
  echo "‚ùå Please provide the contract code id as the first argument."
  exit 1
fi
code=$1

if [ -z "$2" ]
then
  echo "‚ùå Please provide the contract label as the second argument."
  exit 1
fi
label=$2

if [ -z "$3" ]
then
  echo "‚ùå Please provide the contract instantiation json input as the third argument."
  exit 1
fi
json=$3

echo "üì¶ Instantiate contract ${code} to chain ${CHAIN}"
docker run --rm \
  --network host \
  -v `pwd`:/app:ro \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    tx wasm instantiate ${code} "${json}" \
      --from validator \
      --keyring-backend test \
      --home ${CHAIN_HOME} \
      --gas-prices 0.025uknow \
      --gas auto \
      --gas-adjustment 1.5 \
      --chain-id ${CHAIN} \
      --broadcast-mode block \
      --yes \
      --label $label \
      --no-admin
'''

[tasks.chain-query-contract]
dependencies = ["chain-start"]
description = "Query a specific contract to the chain. The contract must be already deployed and instantiated."
script = '''
if [ -z "$1" ]
then
  echo "‚ùå Please provide the contract address as the first argument."
  exit 1
fi
addr=$1

if [ -z "$2" ]
then
  echo "‚ùå Please provide the contract query as the second argument."
  exit 1
fi
query=$2

echo "üì¶ Query contract ${addr} to chain ${CHAIN}"
docker run --rm \
  --network host \
  -v `pwd`:/app:ro \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    query wasm contract-state smart ${addr} "${query}" \
      --output json \
      | jq -r '.'
'''

[tasks.chain-execute-contract]
dependencies = ["chain-start"]
description = "Execute a command on a specific contract to the chain. The contract must be already deployed and instantiated."
script = '''
if [ -z "$1" ]
then
  echo "‚ùå Please provide the contract address as the first argument."
  exit 1
fi
addr=$1

if [ -z "$2" ]
then
  echo "‚ùå Please provide the contract execute msg as the second argument."
  exit 1
fi
msgs=$2

echo "üì¶ Execute on contract ${addr} to chain ${CHAIN}"
docker run --rm \
  --network host \
  -v `pwd`:/app:ro \
  -w /app \
  ${DOCKER_IMAGE_OKP4D} \
    tx wasm execute ${addr} "${msgs}" \
      --from validator \
      --keyring-backend test \
      --home ${CHAIN_HOME} \
      --gas-prices 0.025uknow \
      --gas auto \
      --gas-adjustment 1.5 \
      --chain-id ${CHAIN} \
      --broadcast-mode block \
      --yes \
      --output json \
      | jq -r '.'
'''

[tasks.install-llvm-tools-preview]
install_crate = { rustup_component_name = "llvm-tools-preview" }

[tasks.install-clippy]
install_crate = { rustup_component_name = "clippy" }

[tasks.install-rustfmt]
install_crate = { rustup_component_name = "rustfmt" }

[tasks.install-taplo-cli]
install_crate = { crate_name = "taplo-cli", binary = "taplo", test_arg = "--help" }

[tasks.install-llvm-cov]
install_crate = { crate_name = "cargo-llvm-cov" }

[tasks.install-cosmwasm-check]
install_crate = { crate_name = "cosmwasm-check" }

[config]
default_to_workspace = false
min_version = "0.36.3"

[env]
BALANCE_ALICE = "100000000000uknow"
BALANCE_BOB = "100000000000uknow"
BALANCE_CHARLIE = "100000000000uknow"
BALANCE_VALIDATOR = "1000000000uknow"
CHAIN = "okp4-localnet"
CHAIN_HOME = "${DIR_DEPLOY}/${CHAIN}"
CHAIN_MONIKER = "local-node"
DIR_DEPLOY = "${DIR_TARGET}/deploy"
DIR_TARGET = "./target"
DIR_WASM = "${DIR_TARGET}/wasm32-unknown-unknown/release"
DOCKER_IMAGE_OKP4D = "okp4/okp4d:4.0.0"
KEYRING_BACKEND = "test"
MNEMONIC_ALICE = "code ceiling reduce repeat unfold intact cloud marriage nut remove illegal eternal pool frame mask rate buzz vintage pulp suggest loan faint snake spoon"
MNEMONIC_BOB = "add pig champion lounge initial tunnel oak panic drama float foot elegant coast manage diesel essence glory bicycle sniff upon horse crash damage bounce"
MNEMONIC_CHARLIE = "couple proud learn plunge neglect dice dry tail keen price tuition inherit ordinary portion abandon body kitten system word monitor lava quiz soup lift"
MNEMONIC_VALIDATOR = "island position immense mom cross enemy grab little deputy tray hungry detect state helmet tomorrow trap expect admit inhale present vault reveal scene atom"
SED_FLAG = { script = [
  '''if [ ${SHELL_NAME} = 'Darwin' ]; then echo "\'\'"; else echo; fi''',
] }
SHELL_NAME = { script = ["uname -s"] }
